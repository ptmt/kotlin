ext.configureJvmProject = { Project project ->
    project.configure(project) {
        configurations {
            sources
        }

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.kotlin
        }

        tasks.withType(JavaCompile) {
            options.fork = true
            options.forkOptions.javaHome = file(JDK_18)
        }

        tasks.withType(project.compileKotlin.class) {
            kotlinOptions.jdkHome = JDK_18
        }

        test {
            executable = "$JDK_16/bin/java"
        }
    }
}

ext.configureJavaOnlyJvm6Project = { Project project ->
    project.tasks.withType(JavaCompile) {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
        options.fork = true
        options.forkOptions.javaHome = file(JDK_16)
    }
}

ext.configureJvm6Project = { Project project ->
    project.configure(project) {
        configurations {
            sources
        }

        project.ext.jvmTarget = "1.6"
        project.ext.javaHome = JDK_16

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.kotlin
        }

        configureJavaOnlyJvm6Project(project)

        tasks.withType(project.compileKotlin.class) {
            kotlinOptions.jdkHome = JDK_16
            kotlinOptions.jvmTarget = "1.6"
        }

        test {
            executable = "$JDK_16/bin/java"
        }
    }
}

ext.compileJava9Sources = { Project project, String moduleName, Collection<FileCollection> moduleOutputs = [project.sourceSets.main.output] ->
    // module-info.java should be in java9 source set by convention
    SourceDirectorySet java9SourceSet = project.sourceSets.java9.java
    project.tasks.getByName("compileJava9Java").configure { JavaCompile it ->
        dependsOn(moduleOutputs)
        it.sourceCompatibility = 1.9
        it.targetCompatibility = 1.9
        it.destinationDir = file("${java9SourceSet.outputDir}/META-INF/versions/9")
        it.options.fork = true
        it.options.forkOptions.javaHome = file(JDK_9)
        it.options.sourcepath = files(java9SourceSet.srcDirs)

        doFirst {
            def moduleFiles = files(*moduleOutputs)
            def modulePath = project.configurations.compileClasspath.filter { !(it in moduleFiles.files) }

            options.compilerArgs = [
                    '--module-path', modulePath.asPath,
                    '--patch-module', "$moduleName=${moduleFiles.asPath}"
            ]

            classpath = files()
        }
    }
}

ext.manifestAttributes = { Manifest manifest, Project project, String component = null, boolean multiRelease = false ->
    project.configure(manifest) {
        attributes \
                'Implementation-Vendor': 'JetBrains',
                'Implementation-Title': project.archivesBaseName,
                'Implementation-Version': project.buildNumber

        if (component != null) {
            attributes \
                'Kotlin-Runtime-Component': component,
                'Kotlin-Version': project.kotlinLanguageVersion
        }
        if (multiRelease) {
            attributes \
                'Multi-Release': 'true'
        }
    }
}

task preparePublication {
    def properties = project.properties
    assert project.version != 'unspecified'

    Map<String, String> repositoryProviders = ['sonatype-nexus-staging' : 'sonatype', 'sonatype-nexus-snapshots' : 'sonatype']
    project.ext.isRelease = !project.version.toString().contains('-SNAPSHOT')

    String repo = properties["deployRepo"] ?: properties['deploy-repo']
    String repoProvider = repositoryProviders.get(repo, repo)
    project.ext.isSonatypePublish = repoProvider == 'sonatype'
    project.ext.isSonatypeRelease = isSonatypePublish && isRelease

    project.ext['signing.keyId'] = project.properties['kotlin.key.name']
    project.ext['signing.password'] = project.properties['kotlin.key.passphrase']

    String sonatypeSnapshotsUrl = (isSonatypePublish && !isRelease) ? "https://oss.sonatype.org/content/repositories/snapshots/" : null

    ext.repoUrl = properties["deployRepoUrl"] ?: sonatypeSnapshotsUrl ?: properties["deploy-url"] ?: "file://${rootProject.buildDir}/repo".toString()
    ext.username = properties["deployRepoUsername"] ?: properties["kotlin.${repoProvider}.user"]
    ext.password = properties["deployRepoPassword"] ?: properties["kotlin.${repoProvider}.password"]

    logger.info("Deployment repository preliminary url: $repoUrl ($repoProvider)")

    doLast {
        println("Deployment repository url: $repoUrl")
    }
}

ext.signPom = { Project project, MavenDeployer deployer ->
    deployer.beforeDeployment { MavenDeployment deployment ->
        if (project.signing.required)
            project.signing.signPom(deployment)
    }
}

ext.configurePublishing = { Project project ->
    project.configure(project) {
        apply plugin: 'published-kotlin-module'
    }
}

allprojects { project ->
    project.ext.javadocJar = { lambda = {} ->
        ArtifactsKt.javadocJar(project, lambda)
    }

    dependencies.ext.kotlinStdlib = { suffix ->
        DependenciesKt.kotlinStdlib(project, suffix, null)
    }

    dependencies.ext.kotlinBuiltins = {
        DependenciesKt.kotlinBuiltins(project)
    }
}
